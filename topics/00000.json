{
  "topicId": 0,
  "topicName": "Java",
  "questions": [
    {
      "question": "Какая разница между циклами с предусловием и постусловием?",
      "answers": [
        "Цикл с предусловием может не выполнится",
        "Принципиальной разницы нет",
        "Цикл с постусловием - это оптимизированный цикл с предусловием",
        "Цикл с постусловием может не выполнится"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Какое двоичное значение A8?",
      "answers": [
        "11110101",
        "11101111",
        "10101000",
        "10010111"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "Что такое интерпретация?",
      "answers": [
        "Трансляция программы на языке высокого уровня, в эквивалентную программу на машинном коде",
        "Трансляция программы на языке высокого уровня, в эквивалентную программу на специальном низкоуровневом языке, подлежащем интерпретации виртуальной машиной",
        "Трансляция программы на низкоуровневом языке, в эквивалентную программу на язык высокого уровня",
        "Перенос программы на языке высокого уровня в виртуальную машину"
      ],
      "correctAnswers": [
        1
      ]
    },
    {
      "question": "Что такое автоупаковка (boxing / unboxing)?",
      "answers": [
        "Это автоматическое преобразование из примитивных типов данных к ссылочным",
        "Это автоматическое преобразование из ссылочных к примитивным типам данных",
        "Это автоматическое преобразование из примитивных типов данных к ссылочным и наоборот"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "Назовите основные принципы ООП?",
      "answers": [
        "Инкапсуляция",
        "Полиформизм",
        "Наследование",
        "Масштабирование",
        "Объектность"
      ],
      "correctAnswers": [
        0,
        1,
        2
      ]
    },
    {
      "question": "Какие действия можно выполнить со static методом?",
      "answers": [
        "Перегрузить",
        "Переопределить",
        "Наследовать"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Что такое интерфейс?",
      "answers": [
        "Это элемент, описывающий абстрактный тип данных и его частичную или полную реализацию",
        "Это совокупность методов и правил взаимодействия элементов системы",
        "Наследовать"
      ],
      "correctAnswers": [
        1
      ]
    },
    {
      "question": "Где можно инициализировать нестатические поля?",
      "answers": [
        "При объявлении",
        "В динамическом блоке инициализации",
        "В конструкторе",
        "В статическом блоке инициализации"
      ],
      "correctAnswers": [
        0,
        1,
        2
      ]
    },
    {
      "question": "Какие правила доступа к локальным переменным из анонимного класса?",
      "answers": [
        "Имеет доступ к полям внешнего класса",
        "Имеет доступ к локальным effectively final переменным области, в которой он определен",
        "Имеет доступ к любым переменным области, в которой он определен",
        "Имеет доступ к локальным final переменным области, в которой он определен"
      ],
      "correctAnswers": [
        0,
        1,
        3
      ]
    },
    {
      "question": "В чем отличие equals от ==?",
      "answers": [
        "В equals идет сравнение по ссылкам",
        "Отличий нет",
        "equals не выполняет никаких сравнений",
        "В equals идет сравнение по состоянию объекта"
      ],
      "correctAnswers": [
        3
      ]
    },
    {
      "question": "Какой метод возвращает строковое представление объекта?",
      "answers": [
        "str",
        "toString",
        "stringify",
        "string"
      ],
      "correctAnswers": [
        3
      ]
    },
    {
      "question": "Что будет, если класс объявлен final?",
      "answers": [
        "Класс, помеченный как final, не поддается наследованию",
        "Все методы final класса косвенным образом приобретают свойство final",
        "Такой класс нельзя изменять",
        "Ссылка на такой класс постоянна"
      ],
      "correctAnswers": [
        0,
        1
      ]
    },
    {
      "question": "В чем особенность блока finally?",
      "answers": [
        "Код в блоке finally будет выполнен всегда",
        "finally освобождает память переменной",
        "Код в блоке finally будет выполнен после блока try / catch",
        "Код в блоке finally обрабатывает исключение"
      ],
      "correctAnswers": [
        0,
        2
      ]
    },
    {
      "question": "Какой оператор позволяет принудительно выбросить исключение?",
      "answers": [
        "throw",
        "new",
        "try",
        "throws"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "В чем разница между Iterator и Enumeration?",
      "answers": [
        "Iterator потокобезопасен",
        "Enumeration только для read-only коллекций",
        "У Enumeration есть метод remove",
        "Iterator использует меньше памяти"
      ],
      "correctAnswers": [
        0,
        1
      ]
    },
    {
      "question": "Что делать, чтобы не возникло исключение ConcurrentModificationException?",
      "answers": [
        "Использовать итератор, работающий по принципу fail-safe",
        "Enumeration только для read-only коллекций",
        "У Enumeration есть метод remove",
        "Iterator использует меньше памяти"
      ],
      "correctAnswers": [
        0,
        1
      ]
    },
    {
      "question": "Что будет, если в Map положить два значения с одинаковым ключом?",
      "answers": [
        "По данному ключу будут лежать два значения",
        "Последнее значение не запишется",
        "Последнее значение перезапишет предыдущее",
        "Будет выброшено исключение"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "Что такое итератор?",
      "answers": [
        "Итератор - объект, который позволяет перебирать элементы коллекции",
        "Итератор - объект, который позволяет перебирать коллекции",
        "Итератор - объект, который позволяет перебирать свойства объекта"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Какие коллекции синхронизированы?",
      "answers": [
        "Коллекции из пакета Concurrent",
        "Колекции из пакета Multithreading",
        "Колекции из пакета Parallelism"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "В чем отличия List и Set?",
      "answers": [
        "List хранит объекты в порядке вставки",
        "Set не может хранить одинаковых элементов",
        "Set и List не наследуют общие классы",
        "В List можно получить элемент по индексу"
      ],
      "correctAnswers": [
        0,
        1,
        3
      ]
    },
    {
      "question": "Можно ли наследовать строковый тип?",
      "answers": [
        "Нет, строковые классы объявлены, как final",
        "Да",
        "Да, строковые классы объявлены, как final"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Что такое конкатенация?",
      "answers": [
        "Операция объединения строк, которая возвращает новую строку",
        "Операция объединения строк, которая изменяет строку",
        "Операция взятия подстроки из заданной строки",
        "Операция взятия символа строки по индексу"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Как перевернуть строку?",
      "answers": [
        "\"пример\".reverse();",
        "(new StringBuilder(\"пример\")).reverse();",
        "StringBuilder.reverse(\"пример\");",
        "StringBuffer.reverse(\"пример\");"
      ],
      "correctAnswers": [
        1
      ]
    },
    {
      "question": "Какие существуют виды потоков ввода/вывода?",
      "answers": [
        "Character-oriented streams",
        "String-oriented streams",
        "Byte-oriented streams",
        "Number-oriented streams"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "В каких пакетах лежат Stream-классы?",
      "answers": [
        "java.io",
        "java.streams",
        "java.nio",
        "java.oi"
      ],
      "correctAnswers": [
        0,
        2
      ]
    },
    {
      "question": "Что такое сериализация?",
      "answers": [
        "Это процесс сохранения состояния объекта в последовательность байт",
        "Это процесс сохранения состояния объекта в последовательность символов",
        "Это процесс сохранения состояния класса в последовательность байт",
        "Это процесс сохранения состояния класса в последовательность символов"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Что такое поток?",
      "answers": [
        "Это данные в коллекции",
        "Это процесс выполнение метода",
        "Это одна единица исполнения кода"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "Какие есть способы создания и запуска потоков?",
      "answers": [
        "С помощью класса, реализующего Runnable",
        "С помощью класса, реализующего Callable",
        "С помощью класса, реализующего Comparable",
        "С помощью класса, расширяющего Thread"
      ],
      "correctAnswers": [
        0,
        1,
        3
      ]
    },
    {
      "question": "Как синхронизировать метод?",
      "answers": [
        "final",
        "static",
        "mutex",
        "synchronized"
      ],
      "correctAnswers": [
        3
      ]
    },
    {
      "question": "Как синхронизировать метод?",
      "answers": [
        "synchronized",
        "final",
        "static",
        "mutex"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Как получить текущий поток?",
      "answers": [
        "Thread.thread();",
        "currentThread();",
        "Thread.currentThread();",
        "thread();"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "Что такое deadlock?",
      "answers": [
        "Блокировка потока - явление при котором один поток находится в режиме ожидания",
        "Ожидание выполнения остальных потоков",
        "Взаимная блокировка - явление при котором все потоки находятся в режиме ожидания",
        "Синхронизация потоков"
      ],
      "correctAnswers": [
        2
      ]
    },
    {
      "question": "В чем заключается задача ThreadPool?",
      "answers": [
        "Управление жизненным циклом потоков",
        "Повышение производительности",
        "Ограничение расхода ресурсов"
      ],
      "correctAnswers": [
        0, 1, 2
      ]
    },
    {
      "question": "Что такое атомарная операция?",
      "answers": [
        "Быстро выполняемые операции потока",
        "Операция, выполняемая целиком, либо не выполняемая вовсе",
        "Операция, выполняемая по частям для увеличения производительности"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Зачем нужен класс ThreadLocal?",
      "answers": [
        "Обертка вокруг переменной, обеспечивающая каждый поток индивидуальным экземпляром этой переменной",
        "Обертка вокруг переменной, обеспечивающая возможность доступа к ней множеству потоков",
        "Создает отдельный локальный поток, который контролируется из данного класса"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Что такое Executor?",
      "answers": [
        "Интерфейс, который выполняет переданные потоки",
        "Поток, который выполняет заданный код",
        "Класс, который выполняет переданные потоки"
      ],
      "correctAnswers": [
        0
      ]
    },
    {
      "question": "Зачем нужен ScheduledExecutorService?",
      "answers": [
        "Для периодического запуска кода",
        "Для единичного запуска кода в заданный момент времени",
        "Для единичного запуска кода"
      ],
      "correctAnswers": [
        0
      ]
    }
  ]
}
